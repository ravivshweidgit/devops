      return SystemBus()
        # return SessionBus()

    def load_state(self, filename = None):
        pass

    def save_state(self, filename = None):
        pass

    def get_state(self):
        pass

    def set_state(self, state_json):
        pass

    def list_devices(self):
        pass

    def set_color_at(self, device, color, field = 0):
        pass

    def set_colors(self, device, colors):
        pass

    def set_breathe(self, device, color, speed = None, brightness = None):
        pass

    def set_cycle(self, device, speed, brightness = None):
        pass

    def quit(self):
        pass


class GlightRemoteCommon(object):

    ARRAY_DELIM = ","

    def get_bus(self):
        return SystemBus()


class GlightController(GlightCommon):
    """"""

    BACKEND_LOCAL = 0
    BACKEND_DBUS = 1

    def __init__(self, backend_type, verbose=False):
        """"""
        self.verbose = verbose
        self.backend_type = backend_type
        self.client = None  # type: GlightClient
        self.device_registry = None  # type: GDeviceRegistry
        self.init_backend()

    def init_backend(self):
        if self.is_con_local:
            self.device_registry = GDeviceRegistry()
        elif self.is_con_dbus:
            self.client = GlightClient()
            self.client.connect()

    @property
    def is_con_local(self):
        return self.backend_type == self.BACKEND_LOCAL

    @property
    def is_con_dbus(self):
        return self.backend_type == self.BACKEND_DBUS

    def _assert_supported_backend(self):
        if not (self.is_con_local or self.is_con_dbus):
            raise GControllerException("Unsupported backend '{}'".format(self.backend_type))

    def _assert_device_is_found(self, device_name, device):
        if device is None:
            raise GControllerException("Could not find device '{}'".format(device_name))

    def get_device(self, device_name):
        """
        :param device_name: str
        :return: GDevice
        """
        self._assert_supported_backend()
        if self.is_con_local:
            return self.device_registry.get_device(short_name_filter=device_name)
        return None

    def list_devices(self):
        self._assert_supported_backend()
        device_list = {}
        if self.is_con_local:
            gdevices = self.device_registry.find_devices()
            for gdevice in gdevices:
                device_list[gdevice.device_name_short] = gdevice.device_name
        elif self.is_con_dbus:
            devices = self.client.list_devices()
            for device_name_short, device_name in devices.items():
                device_list[device_name_short] = device_name

        return device_list

    def save_state(self, filename=None):
        self._assert_supported_backend()
        if self.is_con_local:
            self.device_registry.write_state_of_devices(filename)
        elif self.is_con_dbus:
            self.client.save_state()

    def load_state(self, filename=None):
        self._assert_supported_backend()
        if self.is_con_local:
            self.device_registry.load_state_of_devices(filename)
            self.device_registry.restore_states_of_devices()
        elif self.is_con_dbus:
            self.client.load_state()

    def convert_state_to_json(self, state):
        """
        :param state: GDeviceState[]
        :return: str
        """

        state_dict = {}
        for device_name, device_state in state.items():
            state_dict[device_name] = device_state.as_dict()

        return json.dumps(state_dict)

    def get_state(self):
        """
        :return: GDeviceState[]
        """
        self._assert_supported_backend()
        states = {}
        if self.is_con_local:
            for known_device in self.device_registry.known_devices:
                states[known_device.device_name_short] = GDeviceState().import_dict(known_device.device_state.as_dict())
        elif self.is_con_dbus:
            state_json = self.client.get_state()
            state_data = json.loads(state_json)

            devices = self.list_devices()
            for device_name_short, device_name in devices.items():
                if device_name_short in state_data:
                    try:
                        states[device_name_short] = GDeviceState().import_dict(state_data[device_name_short])
                    except Exception as ex:
                        print("Could not load state of device '{}'".format(device_name_short))
                        print("Exception: {}".format(ex))
                        if self.verbose:
                            print(traceback.format_exc())

        return states

    def set_state(self, state):
        self._assert_supported_backend()
        if self.is_con_local:
            if isinstance(state, dict):
                self.device_registry.set_state_of_devices(state)
            elif isinstance(state, str):
                self.device_registry.load_state_from_json(state)
            else:
                raise GControllerException("The method set_state only supports list of states or a JSON representation")
        elif self.is_con_dbus:
            if isinstance(state, dict):
                states_dict = {}
                for device_name, device_state in state.items():
                    if isinstance(device_state, GDeviceState):
                        states_dict[device_name] = device_state.as_dict()
                    elif isinstance(device_state, dict):
                        states_dict[device_name] = device_state
                state_json = json.dumps(states_dict)
            elif isinstance(state, str):
                state_json = state
            else:
                raise GControllerException("The method set_state only supports list of states or a JSON representation")
            self.client.set_state(state_json)

    def set_cycle(self, device_name, speed, brightness=None):
        self._assert_supported_backend()
        if self.is_con_local:
            device = self.get_device(device_name) # type: GDevice
            self._assert_device_is_found(device_name, device)
            device.connect()
            try:
                device.send_cycle_command(speed, brightness)
            finally:
                device.disconnect()
        elif self.is_con_dbus:
            self.client.set_cycle(device_name, speed, brightness)

    def set_color_at(self, device_name, color, field=0):
        self._assert_supported_backend()
        if self.is_con_local:
            device = self.get_device(device_name) # type: GDevice
            self._assert_device_is_found(device_name, device)
            device.connect()
            try:
                device.send_color_command(color, field)
            finally:
                device.disconnect()
        elif self.is_con_dbus:
            self.client.set_color_at(device_name, color, field)

    def set_breathe(self, device_name, color, speed=None, brightness=None):
        self._assert_supported_backend()
        if self.is_con_local:
            device = self.get_device(device_name) # type: GDevice
            self._assert_device_is_found(device_name, device)
            device.connect()
            try:
                device.send_breathe_command(color, speed, brightness)
            finally:
                device.disconnect()
        elif self.is_con_dbus:
            self.client.set_breathe(device_name, color, speed, brightness)

    def set_colors(self, device_name, colors):
        self._assert_supported_backend()
        if self.is_con_local:
            device = self.get_device(device_name) # type: GDevice
            self._assert_device_is_found(device_name, device)
            device.connect()
            try:
                device.send_colors_command(colors)
            finally:
                device.disconnect()
        elif self.is_con_dbus:
            self.client.set_colors(device_name, colors)

    def quit(self):
        self._assert_supported_backend()
        if self.is_con_local:
            raise GControllerException("Quit is not supported locally")
        elif self.is_con_dbus:
            self.client.quit()


class GlightService(GlightRemoteCommon):
    """
      <node>
        <interface name='de.sgdw.linux.glight'>
          <method name='list_devices'>
            <arg type='a{ss}' name='resp'  direction='out'/>
          </method>
          <method name='load_state'>
          </method>
          <method name='save_state'>
          </method>
          <method name='get_state'>
            <arg type='s' name='resp'  direction='out'/>
          </method>
          <method name='set_state'>
            <arg type='s' name='state'  direction='in'/>
          </method>
          <method name='set_color_at'>
            <arg type='s' name='device' direction='in'/>
            <arg type='s' name='color'  direction='in'/>
            <arg type='q' name='field'  direction='in'/>
          </method>
          <method name='set_colors'>
            <arg type='s'  name='device' direction='in'/>
            <arg type='as' name='colors' direction='in'/>
          </method>
          <method name='set_breathe'>
            <arg type='s' name='device' direction='in'/>
            <arg type='s' name='color'  direction='in'/>
            <arg type='x' name='speed'  direction='in'/>
            <arg type='x' name='brightness' direction='in'/>
          </method>
          <method name='set_cycle'>
            <arg type='s' name='device' direction='in'/>
            <arg type='x' name='speed'  direction='in'/>
            <arg type='x' name='brightness' direction='in'/>
          </method>
          <method name='echo'>
            <arg type='x' name='s' direction='in'/>
          </method>
          <method name='quit'/>
        </interface>
      </node>
    """

    # see: https://dbus.freedesktop.org/doc/dbus-specification.html
    # see: https://github.com/LEW21/pydbus/blob/master/doc/tutorial.rst

    bus_name = "de.sgdw.linux.glight"
    bus_path = "/" + bus_name.replace(".", "/")

    def __init__(self, state_file=None, verbose=False):
        """"""
        self.state_file = state_file
        self.verbose = verbose

        self.loop = None
        self.bus  = None
        self.lock = Semaphore()

        self.device_registry = None # type: GDeviceRegistry
        self.init_backend()

    def run(self):
        """"""
        self.prepare_run()
        self.loop = GLib.MainLoop()

        self.bus = self.get_bus()
        self.bus.publish(self.bus_name, self)

        self.loop.run()

    def init_backend(self):
        self.device_registry = GDeviceRegistry()

    def prepare_run(self):
        if self.state_file is not None:
            self.load_state()

    def open_device(self, device_name):
        self.lock.acquire()
        device = self.device_registry.get_device(short_name_filter=device_name) # type: GDevice
        if device is not None:
            device.connect()
        return device

    def close_device(self, device):
        """
        :param device: GDevice
        :return:
        """
        if device is not None:
            device.disconnect()

        self.lock.release()

    def unmarshall_num_par(self, num_val, if_not_set=None):
        """None is not allowed over dbus, so a negative value is the None equivalent over the wire"""
        if num_val < 0:
            return if_not_set
        return num_val

    # Public
    def load_state(self, filename = None):
        if self.state_file is not None:
            try:
                self.device_registry.load_state_of_devices(self.state_file)
                self.device_registry.restore_states_of_devices()
            except Exception as ex:
                print("Failed to restore state '{}'".format(ex.message))
                if self.verbose:
                    print("Exception: {}".format(ex))
                    print(traceback.format_exc())

    # Public
    def save_state(self, filename = None):
        if self.state_file is not None:
            try:
                self.device_registry.write_state_of_devices(self.state_file)
            except Exception as ex:
                print("Failed to save state '{}'".format(ex.message))
                if self.verbose:
                    print("Exception: {}".format(ex))
                    print(traceback.format_exc())
                raise GDeviceException("Failed to save state")
        else:
            raise GDeviceException("No state file configured")

    # Public
    def get_state(self):
        return self.device_registry.get_state_as_json()

    # Public
    def set_state(self, state_json):
        try:
            if self.verbose:
                print("Set state '{}'".format(state_json))
            self.device_registry.load_state_from_json(state_json)
            self.device_registry.restore_states_of_devices()
        except Exception as ex:
            print("Failed to set state '{}'".format(ex.message))
            if self.verbose:
                print("Exception: {}".format(ex))
                print(traceback.format_exc())

    # Public
    def list_devices(self):
        devices = {}
        for device in self.device_registry.find_devices():
            devices[device.device_name_short] = device.device_name
        print("list_devices() := {}".format(devices))
        self.lock.release()
        return devices

    # Public
    def set_color_at(self, device_name, color, field):
        device = self.open_device(device_name)
        try:
            if device is not None:
                print("set_color_at('{}', '{}', {})".format(device_name, color, field))
                device.send_color_command(color, field)
            else:
                raise GDeviceException("Device '{}' not found".format(device_name))
        finally:
            self.close_device(device)

    # Public
    def set_colors(self, device_name, colors):
        device = self.open_device(device_name)
        try:
            if device is not None:
                print("set_colors('{}', {})".format(device_name, colors))
                device.send_colors_command(colors)
            else:
                raise GDeviceException(