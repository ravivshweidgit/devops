Please create details student guide MD format  for the bellow example lesson:

Terra form AWS - terraform-sts lab
===================================

Class lab - under terraform-sts directory
Install AWS CLI
	curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
	unzip awscliv2.zip
	sudo ./aws/install
	aws --version
	ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS$ aws --version
	aws-cli/2.28.7 Python/3.13.4 Linux/6.14.0-27-generic exe/x86_64.ubuntu.24
	ll ~/.aws/credentials

install Terraform CLI
	sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
	This step is deprecated and not recomended i guess next step is better practice : curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
	curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
	echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list

	sudo apt-get update
	sudo apt-get install terraform

	ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS$ terraform --version
	Terraform v1.13.1
	on linux_amd64


After installations lets start the Lesson lab under directory terraform-sts/
==============================================================================

ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS$ cat ~/.aws/credentials
[default]
aws_access_key_id = XXXXXXXXXXXXXXXXXXXX
aws_secret_access_key = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
aws configure

ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS$ aws configure
AWS Access Key ID [****************XXXX]: XXXXXXXXXXXXXXXXXXXX
AWS Secret Access Key [****************XXXX]: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Default region name [il-central-1]: us-east-1
Default output format [None]: json

aws sts get-caller-identity     (sts Security token srvice)

ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS$ aws sts get-caller-identity
{
    "UserId": "AIDAT4ID72Q5IFIBCJ6XS",
    "Account": "266833220666",
    "Arn": "arn:aws:iam::266833220666:user/raviv-admin"
}


lets look at files under terraform-sts
======================================

main.tf
=======

data "aws_caller_identity" "current" {}

output "user_info" {
  value = data.aws_caller_identity.current
}

resource "aws_s3_bucket" "example_bucket" {
  bucket = "example-bucket-${random_id.s3_id.dec}"
  tags = {
    Environment = "dev"
    Project     = "TerraformSTS"
  }
}

resource "random_id" "s3_id" {
  byte_length = 2
}terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~>4.0"
    }
  }
}


providers.tf
============
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~>4.0"
    }
  }
}

provider "aws" {

  region = "us-east-1"
  profile = "<profile name here>"
  assume_role {
    role_arn     = "<role arn here>"
    session_name = "terraform-session"
  }
}

role.yaml
=========
AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create a role with superuser permissions assigned to a specific user and allowing the user to assume any role.

Resources:
  SuperuserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt NewUser.Arn
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: VideoUserAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  NewUser:
    Type: AWS::IAM::User
    Properties:
      UserName: VideoUser
      Policies:
        - PolicyName: AssumeAnyRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: "*"

Outputs:
  SuperuserRoleArn:
    Description: The ARN of the Videouser Role
    Value: !GetAtt SuperuserRole.Arn

  NewUserName:
    Description: The name of the new IAM user
    Value: !Ref NewUser


Now we will apply role.yaml through awd cloudformation cli :

aws cloudformation create-stack --stack-name TerraformAuthStack --template-body file://role.yaml --capabilities CAPABILITY_NAMED_IAM

ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS/terraform-sts$ aws cloudformation create-stack --stack-name TerraformAuthStack --template-body file://role.yaml --capabilities CAPABILITY_NAMED_IAM
{
    "StackId": "arn:aws:cloudformation:us-east-1:266833220666:stack/TerraformAuthStack/bc107fe0-84cf-11f0-baa8-0affed541e0f"
}
ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS/terraform-sts$ 

Now login to you AWS account
	Go to IAM Users :  you will see the created VideoUser
	Go to IAM Roles :  you will see the created TerraformAuthStack-SuperuserRole-CU58d6ffCH8F
	Goto CloudFormation (under region us-east-1 in out example) : you will se created the TerraformAuthStack
	 you cqn go under  TerraformAuthStack Outputs you will also see   NewUserName VideoUser and SuperuserRoleArn arn:aws:iam::266833220666:role/TerraformAuthStack-SuperuserRole-CU58d6ffCH8F


aws iam create-access-key --user-name VideoUser

ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS/terraform-sts$ aws iam create-access-key --user-name VideoUser
{
    "AccessKey": {
        "UserName": "VideoUser",
        "AccessKeyId": "AKIAT4ID72Q5DNDQ23QJ",
        "Status": "Active",
        "SecretAccessKey": "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",
        "CreateDate": "2025-08-29T12:15:22+00:00"
    }
}

those keys are temporay keys
lets configure them :
ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS/terraform-sts$ aws configure
AWS Access Key ID [********************]: AKIAT4ID72Q5DNDQ23QJ    
AWS Secret Access Key [********************]: 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
Default region name [us-east-1]: us-east-1
Default output format [json]: json
ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS/terraform-sts$ 

aws sts get-caller-identity
ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS/terraform-sts$ aws sts get-caller-identity
{
    "UserId": "AIDAT4ID72Q5B2QD3754E",
    "Account": "266833220666",
    "Arn": "arn:aws:iam::266833220666:user/VideoUser"
}


Now we are configured to operate with the new user VideoUser

Lets edit providers.tf  role_arn     = "<role arn here>"
role_arn     = "arn:aws:iam::266833220666:role/TerraformAuthStack-SuperuserRole-CU58d6ffCH8F"
And delete profile line (we dont need this)

provider "aws" {
  region = "us-east-1"
  assume_role {
    role_arn     = "arn:aws:iam::266833220666:role/TerraformAuthStack-SuperuserRole-CU58d6ffCH8F"
    session_name = "terraform-session"
  }
}

terraform init

ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS/terraform-sts$ terraform init
Initializing the backend...
Initializing provider plugins...
- Finding hashicorp/aws versions matching "~> 4.0"...
- Finding latest version of hashicorp/random...
- Installing hashicorp/aws v4.67.0...
- Installed hashicorp/aws v4.67.0 (signed by HashiCorp)
- Installing hashicorp/random v3.7.2...
- Installed hashicorp/random v3.7.2 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS/terraform-sts$ 


terraform plan

ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS/terraform-sts$ terraform plan
data.aws_caller_identity.current: Reading...
data.aws_caller_identity.current: Read complete after 1s [id=266833220666]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.example_bucket will be created
  + resource "aws_s3_bucket" "example_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = (known after apply)
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "dev"
          + "Project"     = "TerraformSTS"
        }
      + tags_all                    = {
          + "Environment" = "dev"
          + "Project"     = "TerraformSTS"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # random_id.s3_id will be created
  + resource "random_id" "s3_id" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 2
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + user_info = {
      + account_id = "266833220666"
      + arn        = "arn:aws:sts::266833220666:assumed-role/TerraformAuthStack-SuperuserRole-CU58d6ffCH8F/terraform-session"
      + id         = "266833220666"
      + user_id    = "AROAT4ID72Q5IJVPRQER4:terraform-session"
    }

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.


terraform apply

random_id.s3_id: Creating...
random_id.s3_id: Creation complete after 0s [id=4Mk]
aws_s3_bucket.example_bucket: Creating...
aws_s3_bucket.example_bucket: Creation complete after 5s [id=example-bucket-57545]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

user_info = {
  "account_id" = "266833220666"
  "arn" = "arn:aws:sts::266833220666:assumed-role/TerraformAuthStack-SuperuserRole-CU58d6ffCH8F/terraform-session"
  "id" = "266833220666"
  "user_id" = "AROAT4ID72Q5IJVPRQER4:terraform-session"
}
ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS/terraform-sts$ 


Now goto AWS S3 dash board,
you will see :  example-bucket-57545


terraform destroy
aws_s3_bucket.example_bucket: Destroying... [id=example-bucket-57545]
aws_s3_bucket.example_bucket: Destruction complete after 1s
random_id.s3_id: Destroying... [id=4Mk]
random_id.s3_id: Destruction complete after 0s

Destroy complete! Resources: 2 destroyed.


place back you admin user :

ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS/terraform-sts$ aws configure
AWS Access Key ID [****************XXXX]: XXXXXXXXXXXXXXXXXXXX
AWS Secret Access Key [****************XXXX]: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Default region name [us-east-1]: us-east-1
Default output format [json]: json


aws cloudformation delete-stack --stack-name TerraformAuthStack

ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS/terraform-sts$ aws cloudformation delete-stack --stack-name TerraformAuthStack
ravivm@ravivm-N501VW:~/projects/devops/2025-08-27-TerraForms-AWS/terraform-sts$ 

Go to AWS  cloudformation  DELETE_IN_PROGRESS now ...

